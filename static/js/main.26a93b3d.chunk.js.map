{"version":3,"sources":["logo.svg","Components/ToDoList/addTodo.js","Components/ToDoList/todoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddTodo","state","Id","Description","status","handleIdChange","event","setState","target","value","handleNameChange","handleStatusChange","handleToDoSubmit","preventDefault","props","onAdd","className","this","onChange","placeholder","type","onClick","Component","TodoList","todos","deleteTodo","item","filteredItems","filter","x","editTodo","map","addTodo","key","icon","library","add","faTrash","faEdit","faPlus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26a93b3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nexport default class AddTodo extends Component\r\n{\r\n    state={\r\n        Id:\"\",\r\n        Description:\"\",\r\n        status:\"Pending\"\r\n    }\r\n\r\n    handleIdChange= (event)=>{\r\n        this.setState({\r\n            Id:event.target.value\r\n        });\r\n    }\r\n\r\n    handleNameChange= (event)=>{\r\n        this.setState({\r\n            Description:event.target.value\r\n        });\r\n    }\r\n\r\n    handleStatusChange= (event)=>{\r\n        this.setState({\r\n            status:event.target.value\r\n        });\r\n    }\r\n\r\n    handleToDoSubmit = (event)=>{\r\n        event.preventDefault();\r\n        this.props.onAdd(\r\n            {\r\n                Id:this.state.Id,\r\n                Description:this.state.Description,\r\n                status:this.state.status\r\n            });\r\n        this.setState({\r\n            Id:\"\",\r\n            Description:\"\",\r\n            status:\"Pending\"\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Add Todo</h1>\r\n                <form>\r\n                    <div className='form-group'>\r\n                        <input value={this.state.Id} className='form-control' onChange={this.handleIdChange}  placeholder='Enter Id'></input>\r\n                        </div>\r\n                    <div className='form-group'>\r\n                        <input value={this.state.Description} className='form-control' onChange={this.handleNameChange} placeholder='Enter Description'></input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <select value={this.state.status} onChange={this.handleStatusChange}>\r\n                            <option value='In-Progress'>In-Progress</option>\r\n                            <option value='Pending'>Pending</option>\r\n                            <option value='Done'>Done</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <button  type='submit' onClick={this.handleToDoSubmit} className='form-control btn btn-primary'>Add Todo</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport AddTodo from './addTodo';\r\n\r\nexport default class TodoList extends Component\r\n{\r\n    state={\r\n        todos:[\r\n            {\r\n                Id:1,\r\n                Description:'Create React App',\r\n                status:'In-Progress'\r\n            },\r\n            {\r\n                Id:2,\r\n                Description: 'Create ToDo React App',\r\n                status:'In-Progress'\r\n            }\r\n        ]\r\n    }\r\n\r\n    deleteTodo = (item)=>{\r\n       const filteredItems = this.state.todos.filter(x=>x.Id != item.Id);\r\n       this.setState({\r\n           todos: filteredItems\r\n       });\r\n    }\r\n\r\n    editTodo = (item)=>{\r\n        const todos = this.state.todos;\r\n        this.setState({\r\n            todos: todos.map(x=>{\r\n                if(x.Id == item.Id) {\r\n                    return {...x, status : x.status == 'In-Progress'? 'Done' : 'In-Progress'}\r\n                }else{\r\n                    return x;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    addTodo = (item)=> {\r\n        this.setState({\r\n            todos:[...this.state.todos, item]\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Add ToDo</h1>\r\n                <AddTodo onAdd={this.addTodo}></AddTodo>\r\n                <h1>ToDo List</h1>\r\n                <table className='table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Description</th>\r\n                            <th>Status</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.todos.map(x=>{\r\n                                return (<tr key={x.Id}>\r\n                                    <td>{x.Id}</td>\r\n                                    <td>{x.Description}</td>\r\n                                    <td>{x.status}</td>\r\n                                    <td><button onClick={() => {this.deleteTodo(x)}}>\r\n                                        <span>\r\n                                            <FontAwesomeIcon icon='trash'></FontAwesomeIcon>\r\n                                        </span>\r\n                                        </button></td>\r\n                                    <td><button onClick={() => {this.editTodo(x)}}>\r\n                                        <span>\r\n                                            <FontAwesomeIcon icon='edit'></FontAwesomeIcon>\r\n                                        </span>\r\n                                    </button></td>\r\n                                </tr>)\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './Components/ToDoList/todoList';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash, faPlus, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash, faEdit, faPlus);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>App Component</h1>\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}